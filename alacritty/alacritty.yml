# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use 'alacritty' if it is
  # available, otherwise 'xterm-256color' is used.
  #
  TERM: screen-256color

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 0
    lines: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is not scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 10
    y: 10

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background and no title bar buttons
  decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Maximized

  # Window title
  #title: Alacritty
  # Allow terminal applications to change Alacritty's window title.
  #dynamic_title: true

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 100000

  # Scrolling distance multiplier.
  multiplier: 10

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # family: Source Code Pro for Powerline
    family: SauceCodePro Nerd Font Mono
    # The `style` can be specified to pick a specific face.
    style: Regular

  # Bold font face
  bold:
    # family: Source Code Pro for Powerline
    family: SauceCodePro Nerd Font Mono
    # The `style` can be specified to pick a specific face.
    style: Bold

  # Italic font face
  italic:
    # family: Source Code Pro for Powerline
    family: SauceCodePro Nerd Font Mono
    # The `style` can be specified to pick a specific face.
    style: Italic

  # Point size
  size: 13

  # Offset is the extra space around each character. `offset.y` can be thought
  # of as modifying the line spacing, and `offset.x` as modifying the letter
  # spacing.
  offset:
    x: 0
    y: 0

  # Better font rendering for mac
  use_thin_strokes: true

# If `true`, bold text is drawn using the bright color variants.
#draw_bold_text_with_bright_colors: false

# Colors (Doom One)
colors:
  primary:
    background: "0x242730"
    foreground: "0xdfdfdf"

  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor.
  #
  # Allowed values are CellForeground and CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.
  cursor:
    text: CellBackground
    cursor: "0x51afef"

  # Normal colors
  normal:
    black: "0x242730"
    red: "0xff665c"
    green: "0x7bc275"
    yellow: "0xfcce7b"
    blue: "0x51afef"
    magenta: "0xc57bdb"
    cyan: "0x5cefff"
    white: "0xdfdfdf"

# Bell
#
# The bell is rung every time the BEL control character is received.
bell:
  # Visual Bell Animation
  #
  # Animation effect for flashing the screen when the visual bell is rung.
  #
  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  animation: EaseOutExpo

  # Duration of the visual bell flash in milliseconds. A `duration` of `0` will
  # disable the visual bell animation.
  duration: 0

  # Visual bell animation color.
  color: "#ffffff"

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
background_opacity: 1.0

selection:
  # This string contains all characters that are used as separators for
  # "semantic words" in Alacritty.
  #semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true
# Live config reload (changes require restart)
#live_config_reload: true

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }
# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#       Open URLs at the cursor location with the launcher configured in
#       `url.launcher`.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#
# - Vi mode exclusive cursor motion actions:
#
#   - Up
#       One line up.
#   - Down
#       One line down.
#   - Left
#       One character left.
#   - Right
#       One character right.
#   - First
#       First column, or beginning of the line when already at the first column.
#   - Last
#       Last column, or beginning of the line when already at the last column.
#   - FirstOccupied
#       First non-empty cell in this terminal row, or first non-empty cell of
#       the line when already at the first cell of the row.
#   - High
#       Top of the screen.
#   - Middle
#       Center of the screen.
#   - Low
#       Bottom of the screen.
#   - SemanticLeft
#       Start of the previous semantically separated word.
#   - SemanticRight
#       Start of the next semantically separated word.
#   - SemanticLeftEnd
#       End of the previous semantically separated word.
#   - SemanticRightEnd
#       End of the next semantically separated word.
#   - WordLeft
#       Start of the previous whitespace separated word.
#   - WordRight
#       Start of the next whitespace separated word.
#   - WordLeftEnd
#       End of the previous whitespace separated word.
#   - WordRightEnd
#       End of the next whitespace separated word.
#   - Bracket
#       Character matching the bracket at the cursor's location.
#   - SearchNext
#       Beginning of the next match.
#   - SearchPrevious
#       Beginning of the previous match.
#   - SearchStart
#       Start of the match to the left of the vi mode cursor.
#   - SearchEnd
#       End of the match to the right of the vi mode cursor.
#
# - macOS exclusive actions:
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
# - Linux/BSD exclusive actions:
#
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
#key_bindings:
#- { key: Paste,                                action: Paste          }
#- { key: Copy,                                 action: Copy           }
#- { key: L,         mods: Control,             action: ClearLogNotice }
#- { key: L,         mods: Control, mode: ~Vi,  chars: "\x0c"          }
#- { key: PageUp,    mods: Shift,   mode: ~Alt, action: ScrollPageUp,  }
#- { key: PageDown,  mods: Shift,   mode: ~Alt, action: ScrollPageDown }
#- { key: Home,      mods: Shift,   mode: ~Alt, action: ScrollToTop,   }
#- { key: End,       mods: Shift,   mode: ~Alt, action: ScrollToBottom }

# Vi Mode
#- { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
#- { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
#- { key: Escape,                      mode: Vi, action: ClearSelection          }
#- { key: I,                           mode: Vi, action: ScrollToBottom          }
#- { key: I,                           mode: Vi, action: ToggleViMode            }
#- { key: C,      mods: Control,       mode: Vi, action: ToggleViMode            }
#- { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
#- { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
#- { key: G,                           mode: Vi, action: ScrollToTop             }
#- { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
#- { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
#- { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
#- { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
#- { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
#- { key: Y,                           mode: Vi, action: Copy                    }
#- { key: Y,                           mode: Vi, action: ClearSelection          }
#- { key: Copy,                        mode: Vi, action: ClearSelection          }
#- { key: V,                           mode: Vi, action: ToggleNormalSelection   }
#- { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
#- { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
#- { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
#- { key: Return,                      mode: Vi, action: Open                    }
#- { key: K,                           mode: Vi, action: Up                      }
#- { key: J,                           mode: Vi, action: Down                    }
#- { key: H,                           mode: Vi, action: Left                    }
#- { key: L,                           mode: Vi, action: Right                   }
#- { key: Up,                          mode: Vi, action: Up                      }
#- { key: Down,                        mode: Vi, action: Down                    }
#- { key: Left,                        mode: Vi, action: Left                    }
#- { key: Right,                       mode: Vi, action: Right                   }
#- { key: Key0,                        mode: Vi, action: First                   }
#- { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
#- { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
#- { key: H,      mods: Shift,         mode: Vi, action: High                    }
#- { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
#- { key: L,      mods: Shift,         mode: Vi, action: Low                     }
#- { key: B,                           mode: Vi, action: SemanticLeft            }
#- { key: W,                           mode: Vi, action: SemanticRight           }
#- { key: E,                           mode: Vi, action: SemanticRightEnd        }
#- { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
#- { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
#- { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
#- { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }
#- { key: Slash,                       mode: Vi, action: SearchForward           }
#- { key: Slash,  mods: Shift,         mode: Vi, action: SearchBackward          }
#- { key: N,                           mode: Vi, action: SearchNext              }
#- { key: N,      mods: Shift,         mode: Vi, action: SearchPrevious          }

# (Windows, Linux, and BSD only)
#- { key: V,              mods: Control|Shift,           action: Paste            }
#- { key: C,              mods: Control|Shift,           action: Copy             }
#- { key: F,              mods: Control|Shift,           action: SearchForward    }
#- { key: B,              mods: Control|Shift,           action: SearchBackward   }
#- { key: C,              mods: Control|Shift, mode: Vi, action: ClearSelection   }
#- { key: Insert,         mods: Shift,                   action: PasteSelection   }
#- { key: Key0,           mods: Control,                 action: ResetFontSize    }
#- { key: Equals,         mods: Control,                 action: IncreaseFontSize }
#- { key: Plus,           mods: Control,                 action: IncreaseFontSize }
#- { key: NumpadAdd,      mods: Control,                 action: IncreaseFontSize }
#- { key: Minus,          mods: Control,                 action: DecreaseFontSize }
#- { key: NumpadSubtract, mods: Control,                 action: DecreaseFontSize }

# (Windows only)
#- { key: Return,   mods: Alt,           action: ToggleFullscreen }

# (macOS only)
#- { key: K,              mods: Command, mode: ~Vi, chars: "\x0c"            }
#- { key: Key0,           mods: Command,            action: ResetFontSize    }
#- { key: Equals,         mods: Command,            action: IncreaseFontSize }
#- { key: Plus,           mods: Command,            action: IncreaseFontSize }
#- { key: NumpadAdd,      mods: Command,            action: IncreaseFontSize }
#- { key: Minus,          mods: Command,            action: DecreaseFontSize }
#- { key: NumpadSubtract, mods: Command,            action: DecreaseFontSize }
#- { key: K,              mods: Command,            action: ClearHistory     }
#- { key: V,              mods: Command,            action: Paste            }
#- { key: C,              mods: Command,            action: Copy             }
#- { key: C,              mods: Command, mode: Vi,  action: ClearSelection   }
#- { key: H,              mods: Command,            action: Hide             }
#- { key: M,              mods: Command,            action: Minimize         }
#- { key: Q,              mods: Command,            action: Quit             }
#- { key: W,              mods: Command,            action: Quit             }
#- { key: N,              mods: Command,            action: SpawnNewInstance }
#- { key: F,              mods: Command|Control,    action: ToggleFullscreen }
#- { key: F,              mods: Command,            action: SearchForward    }
#- { key: B,              mods: Command,            action: SearchBackward   }
