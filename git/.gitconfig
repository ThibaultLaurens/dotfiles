# TODO:
# - pull-all (from shell/aliases)
#	- repos (from shell/functions)

[user]
	name = Thibault Laurens
	email = laurens.thibault@gmail.com

[credential]
	helper = osxkeychain

[status]
	# also show individual files in untracked directories
  showUntrackedFiles = all

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	old = red # deletions
	new = green # additions

[help]
	# automatically correct and execute mistyped commands
	autocorrect = 1

[core]
	excludesfile = ~/.gitignore
	pager = diff-so-fancy | less --tabs=4 -RFX

[alias]
	# remove any remote-tracking references that no longer exist on the remote
	prune = fetch --prune

	# go back in (commit) history
	undo = reset --soft HEAD^
	# undo = reset HEAD~1 --mixed

	# saves local updates, including un-added files
	stash-all = stash save --include-untracked

	# amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

	# prettier git log
	log = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

	# create a pull-request and open it in the browser
	pr = pull-request -o

	# list tags, branches or remotes
  tags = tag -l
  branches = branch -av
  remotes = remote -v

	# remove untracked files
	clean = clean -xfdi

	# switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# short status summary, but include branch info
	status = status -sb

	# step through each change, or hunk when adding to git
	add = add -p

	# by default, push the current branch to the same name on the remote
	push = push origin HEAD

	wtf = "! git log --pretty=tformat:\"%C(auto,yellow)%h%C(auto)%d%C(auto,reset) by %C(auto,blue)%cn%C(auto,reset), %C(auto,cyan)%ar%C(auto,reset)%n %s\" --stat"

	wip = "!f() { git commit -m "wip" . && git push origin HEAD; }; f"

	# clone a repository including all submodules
	clone = clone --recursive

	# list contributors with number of commits
	contributors = shortlog --summary --numbered

	# fancy diff
	diff= diff --patch-with-stat --color

	# fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Find branches containing commit
	# fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	# ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	# fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	# fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; };

	# r = rebase -i HEAD~15
