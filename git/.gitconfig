
[user]
	name = Thibault Laurens
	email = laurens.thibault@gmail.com

[status]
	# also show individual files in untracked directories
	showUntrackedFiles = all

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	old = red # deletions
	new = green # additions

[help]
	# automatically correct and execute mistyped commands
	autocorrect = 1

[core]
	excludesfile = ~/.gitignore
	pager = diff-so-fancy | less --tabs=4 -RFX
	autocrlf = input

[diff]
	tool = icdiff

[difftool]
	prompt = false

[difftool "icdiff"]
	cmd = /usr/local/bin/icdiff --line-numbers $LOCAL $REMOTE

[pager]
	difftool = true

[alias]
	# remove any remote-tracking references that no longer exist on the remote
	prune = fetch --prune

	# TODO: check that
	# rebase = rebase -i HEAD~15

	# go back in (commit) history
	undo = reset --soft HEAD^

	# TODO: check that
	# undo = reset HEAD~1 --mixed

	# shortcut for opening a pull-request in github
	open-pr = pull-request -o

	# saves local updates, including un-added files
	stash-all = stash save --include-untracked

	# amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# list tags, branches or remotes
	tags = tag -l
	branches = branch -av
	remotes = remote -v

	# remove untracked files
	rm-untracked = clean -xfdi

	# switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# short status summary, but include branch info
	ss = status -sb

	# step through each change, or hunk when adding to git
	ap = add -p

	# by default, push the current branch to the same name on the remote
	pu = push origin HEAD

	# pull submodules, to latest commits instead of what the repo point to
	pull-recurse = pull --recurse-submodules

	# quick and easy wip
	wip = "!f() { git commit -m "wip" . && git push origin HEAD; }; f"

	# cl a repository including all submodules
	cl = clone --recursive

	# list contributors with number of commits
	contributors = shortlog --summary --numbered

	# add stats summary to diffs
	df = diff --patch-with-stat

	# diff staged files
	dfs = diff --patch-with-stat --staged

	# prettier git log
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

	# prettier git log, with stats
	log-stat = "! git log --pretty=tformat:\"%C(auto,yellow)%h%C(auto)%d%C(auto,reset) by %C(auto,blue)%cn%C(auto,reset), %C(auto,cyan)%ar%C(auto,reset)%n %s\" --stat"

	# Find branches containing commit
	find-branches = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	find-tags = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	find-commits = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	find-messages = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# remove all local branches except master
	rm-branches = "!f() { git branch | grep -v "master" | xargs git branch -D; }; f"

[url "git@github.com:"]
	insteadOf = https://github.com/
[http]
	sslverify = false
