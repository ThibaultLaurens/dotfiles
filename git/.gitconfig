[user]
	name = Thibault Laurens
	email = thibault.laurens@pm.me

[includeIf "gitdir:~/git/work/"]
  path = .gitconfig.work

[branch "master"]
    remote = origin
    merge = refs/heads/master

[url "git@github.com:"]
    insteadOf = https://github.com/

[status]
	# also show individual files in untracked directories
	showUntrackedFiles = all

[pull]
	rebase = false

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	old = red # deletions
	new = green # additions

[help]
	# automatically correct and execute mistyped commands
	autocorrect = 1

[core]
	excludesfile = ~/.gitignore
	pager = diff-so-fancy | less --tabs=4 -RFX
	autocrlf = input

[diff]
	tool = icdiff

[difftool]
	prompt = false

[difftool "icdiff"]
	cmd = /usr/local/bin/icdiff --line-numbers $LOCAL $REMOTE

[pager]
	difftool = true

[alias]
	# amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# list branches
	branches = branch -av

	# list contributors with number of commits
	contributors = shortlog --summary --numbered

	# add stats summary to diffs
	df = diff --patch-with-stat

	# diff staged files
	dfs = diff --patch-with-stat --staged

	# switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout -f \"$1\"; }; f"

	# pretty log, with graph
	logg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

	# pretty log, short lines
	logp = log --decorate --date=short --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d'

	# pretty log, with stats
	logs = log --stat --pretty=format:\"%C(yellow)%h %C(auto)%d %C(reset) by %C(blue)%cn%C(reset), %C(cyan)%ar%C(reset)%n %s\"

	# by default, push the current branch to the same name on the remote
	pu = push origin HEAD

	# shortcut for opening a pull-request in github
	pr = pull-request -o

	# remove any remote-tracking references that no longer exist on the remote
	prune = fetch --prune

	# list remotes
	remotes = remote -v

	# remove all local branches except master
	rm-branches = "!f() { git branch | grep -v "master" | xargs git branch -D; }; f"

	# remove untracked files
	rm-untracked = clean -xfdi

	# search branches containing commit
	search-branches = "!f() { git branch -a --contains $1; }; f"

	# search tags containing commit
	search-tags = "!f() { git describe --always --contains $1; }; f"

	# search commits by source code
	search-codes = "!f() { git logp -S$1; }; f"

	# search commits by commit message
	search-commits = "!f() { git logp --grep=$1; }; f"

	# short status summary, but include branch info
	ss = status -sb

	# saves local updates, including un-added files
	stash-all = stash save --include-untracked

	# list tags
	tags = tag -l\

	# go back in (commit) history
	undo = reset --soft HEAD^

	# quick and easy wip
	wip = "!f() { git commit -m "wip" . && git push origin HEAD; }; f"
